# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/win/visual_studio_version.gni")

config("libuv_public_config") {
  include_dirs = [ "include" ]

  if (!is_win) {
    defines = [
      "_LARGEFILE_SOURCE",
      "_FILE_OFFSET_BITS=64",
    ]
    if (is_mac || is_ios) {
      defines += [ "_DARWIN_USE_64_BIT_INODE=1" ]
    }
    if (is_linux) {
      defines += [ "_POSIX_C_SOURCE=200112" ]
    }
  }
}

config("disable_warnings_config") {
  if (is_win) {
    cflags = [
      "/wd4054",
      "/wd4113",
      "/wd4131",
      "/wd4189",
      "/wd4201",
      "/wd4204",
      "/wd4210",
      "/wd4245",
      "/wd4267",
      "/wd4389",
      "/wd4459",
      "/wd4477",
      "/wd4701",
      "/wd4703",
    ]
  }
}

config("libuv_config") {
  include_dirs = [
    "include",
    "src/",
  ]
  
  if (is_win) {
    defines = [
      "_WIN32_WINNT=0x0600",
      "_GNU_SOURCE",
    ]
    libs = [
      "advapi32.lib",
      "iphlpapi.lib",
      "psapi.lib",
      "shell32.lib",
      "userenv.lib",
      "ws2_32.lib",
    ]
  } else {
    cflags = [
      "-g",
      "--std=gnu89",
      "-pedantic",
      "-Wall",
      "-Wextra",
      "-Wno-unused-parameter",
    ]
    
    libs = [ "m" ]
    
    if (!is_android) {
      ldflags = [ "-pthread" ]
    }
    
    if (is_mac || is_ios) {
      defines = [
        "_DARWIN_USE_64_BIT_INODE=1",
        "_DARWIN_UNLIMITED_SELECT=1",
      ]
    }
    
    if (!is_mac) {
      # Enable on all platforms except OS X. The antique gcc/clang that
      # ships with Xcode emits waaaay too many false positives.
      cflags += [ "-Wstrict-aliasing" ]
    }
    
    if (is_linux) {
      defines = [ "_GNU_SOURCE" ]
      libs += [ "dl", "rt" ]
    }
    
    if (is_android) {
      libs += [ "dl" ]
    }
  }
}

source_set("libuv") {
  sources = [
    "include/uv.h",
    "include/tree.h",
    "include/uv-errno.h",
    "include/uv-threadpool.h",
    "include/uv-version.h",
    "src/fs-poll.c",
    "src/heap-inl.h",
    "src/inet.c",
    "src/queue.h",
    "src/threadpool.c",
    "src/uv-common.c",
    "src/uv-common.h",
    "src/version.c",
  ]

  if (is_win) {
    sources += [
      "include/uv-win.h",
      "src/win/async.c",
      "src/win/atomicops-inl.h",
      "src/win/core.c",
      "src/win/dl.c",
      "src/win/error.c",
      "src/win/fs.c",
      "src/win/fs-event.c",
      "src/win/getaddrinfo.c",
      "src/win/getnameinfo.c",
      "src/win/handle.c",
      "src/win/handle-inl.h",
      "src/win/internal.h",
      "src/win/loop-watcher.c",
      "src/win/pipe.c",
      "src/win/thread.c",
      "src/win/poll.c",
      "src/win/process.c",
      "src/win/process-stdio.c",
      "src/win/req.c",
      "src/win/req-inl.h",
      "src/win/signal.c",
      "src/win/stream.c",
      "src/win/stream-inl.h",
      "src/win/tcp.c",
      "src/win/tty.c",
      "src/win/timer.c",
      "src/win/udp.c",
      "src/win/util.c",
      "src/win/winapi.c",
      "src/win/winapi.h",
      "src/win/winsock.c",
      "src/win/winsock.h",
    ]
    
    if (visual_studio_version < 2015) {
      sources += [
        "src/win/snprintf.c"
      ]
    }
  } else {
    sources += [
      "include/uv-unix.h",
      "include/uv-linux.h",
      "include/uv-sunos.h",
      "include/uv-darwin.h",
      "include/uv-bsd.h",
      "include/uv-aix.h",
      "src/unix/async.c",
      "src/unix/atomic-ops.h",
      "src/unix/core.c",
      "src/unix/dl.c",
      "src/unix/fs.c",
      "src/unix/getaddrinfo.c",
      "src/unix/getnameinfo.c",
      "src/unix/internal.h",
      "src/unix/loop.c",
      "src/unix/loop-watcher.c",
      "src/unix/pipe.c",
      "src/unix/poll.c",
      "src/unix/process.c",
      "src/unix/signal.c",
      "src/unix/spinlock.h",
      "src/unix/stream.c",
      "src/unix/tcp.c",
      "src/unix/thread.c",
      "src/unix/timer.c",
      "src/unix/tty.c",
      "src/unix/udp.c",
    ]
    
    if (is_linux || is_mac || is_ios || is_android) {
      sources += [ "src/unix/proctitle.c" ]
    }
    if (is_mac || is_ios) {
      sources += [
        "src/unix/darwin.c",
        "src/unix/fsevents.c",
        "src/unix/darwin-proctitle.c",
      ]
    }
    if (is_linux) {
      sources += [
        "src/unix/linux-core.c",
        "src/unix/linux-inotify.c",
        "src/unix/linux-syscalls.c",
        "src/unix/linux-syscalls.h",
      ]
    }
    if (is_android) {
      sources += [
        "src/unix/linux-core.c",
        "src/unix/linux-inotify.c",
        "src/unix/linux-syscalls.c",
        "src/unix/linux-syscalls.h",
        "src/unix/pthread-fixes.c",
        "src/unix/android-ifaddrs.c"
      ]
    }
    if (is_ios || is_mac) {
      sources += [ "src/unix/kqueue.c" ]
    }
  }
  
  configs += [
    ":libuv_config",
    ":disable_warnings_config",
  ]

  public_configs = [ ":libuv_public_config" ]
}

static_library("libuv_static") {
  complete_static_lib = true
  
  public_deps = [
    ":libuv"
  ]
}

config("libuv_shared_public_config") {
  defines = [ "USING_UV_SHARED=1" ]
}

shared_library("libuv_shared") {
  defines = [ "BUILDING_UV_SHARED=1" ]

  cflags = [ "-fPIC" ]

  if (!is_win && !is_mac) {
    # This will cause gyp to set soname
    # Must correspond with UV_VERSION_MAJOR
    # in include/uv-version.h
    output_extension = "so.1"
  }

  public_configs = [
    ":libuv_shared_public_config",
  ]
  
  public_deps = [
    ":libuv"
  ]
}

config("default_config") {
  if (!is_win) {
    defines = [
      "_LARGEFILE_SOURCE",
      "_FILE_OFFSET_BITS=64",
    ]
    
    cflags = []
    if (!is_android) {
      cflags += [ "-pthread" ]
    }
    if (is_mac || is_ios) {
      cflags += [ "-Wall", "-Wextra", "-Wno-unused-parameter" ]
      cflags += [ "-g", "--std=gnu89", "-pedantic" ]
    }
  }
}

executable("libuv-run-tests") {
  sources = [
    "test/blackhole-server.c",
    "test/echo-server.c",
    "test/run-tests.c",
    "test/runner.c",
    "test/runner.h",
    "test/test-get-loadavg.c",
    "test/task.h",
    "test/test-active.c",
    "test/test-async.c",
    "test/test-async-null-cb.c",
    "test/test-callback-stack.c",
    "test/test-callback-order.c",
    "test/test-close-fd.c",
    "test/test-close-order.c",
    "test/test-connection-fail.c",
    "test/test-cwd-and-chdir.c",
    "test/test-default-loop-close.c",
    "test/test-delayed-accept.c",
    "test/test-error.c",
    "test/test-embed.c",
    "test/test-emfile.c",
    "test/test-fail-always.c",
    "test/test-fs.c",
    "test/test-fs-event.c",
    "test/test-get-currentexe.c",
    "test/test-get-memory.c",
    "test/test-getaddrinfo.c",
    "test/test-getnameinfo.c",
    "test/test-getsockname.c",
    "test/test-handle-fileno.c",
    "test/test-homedir.c",
    "test/test-hrtime.c",
    "test/test-idle.c",
    "test/test-ipc.c",
    "test/test-ipc-send-recv.c",
    "test/test-list.h",
    "test/test-loop-handles.c",
    "test/test-loop-alive.c",
    "test/test-loop-close.c",
    "test/test-loop-stop.c",
    "test/test-loop-time.c",
    "test/test-loop-configure.c",
    "test/test-walk-handles.c",
    "test/test-watcher-cross-stop.c",
    "test/test-multiple-listen.c",
    "test/test-osx-select.c",
    "test/test-pass-always.c",
    "test/test-ping-pong.c",
    "test/test-pipe-bind-error.c",
    "test/test-pipe-connect-error.c",
    "test/test-pipe-connect-multiple.c",
    "test/test-pipe-connect-prepare.c",
    "test/test-pipe-getsockname.c",
    "test/test-pipe-pending-instances.c",
    "test/test-pipe-sendmsg.c",
    "test/test-pipe-server-close.c",
    "test/test-pipe-close-stdout-read-stdin.c",
    "test/test-pipe-set-non-blocking.c",
    "test/test-platform-output.c",
    "test/test-poll.c",
    "test/test-poll-close.c",
    "test/test-poll-close-doesnt-corrupt-stack.c",
    "test/test-poll-closesocket.c",
    "test/test-process-title.c",
    "test/test-ref.c",
    "test/test-run-nowait.c",
    "test/test-run-once.c",
    "test/test-semaphore.c",
    "test/test-shutdown-close.c",
    "test/test-shutdown-eof.c",
    "test/test-shutdown-twice.c",
    "test/test-signal.c",
    "test/test-signal-multiple-loops.c",
    "test/test-socket-buffer-size.c",
    "test/test-spawn.c",
    "test/test-fs-poll.c",
    "test/test-stdio-over-pipes.c",
    "test/test-tcp-bind-error.c",
    "test/test-tcp-bind6-error.c",
    "test/test-tcp-close.c",
    "test/test-tcp-close-accept.c",
    "test/test-tcp-close-while-connecting.c",
    "test/test-tcp-create-socket-early.c",
    "test/test-tcp-connect-error-after-write.c",
    "test/test-tcp-shutdown-after-write.c",
    "test/test-tcp-flags.c",
    "test/test-tcp-connect-error.c",
    "test/test-tcp-connect-timeout.c",
    "test/test-tcp-connect6-error.c",
    "test/test-tcp-open.c",
    "test/test-tcp-write-to-half-open-connection.c",
    "test/test-tcp-write-after-connect.c",
    "test/test-tcp-writealot.c",
    "test/test-tcp-write-fail.c",
    "test/test-tcp-try-write.c",
    "test/test-tcp-unexpected-read.c",
    "test/test-tcp-oob.c",
    "test/test-tcp-read-stop.c",
    "test/test-tcp-write-queue-order.c",
    "test/test-threadpool.c",
    "test/test-threadpool-cancel.c",
    "test/test-thread-equal.c",
    "test/test-mutexes.c",
    "test/test-thread.c",
    "test/test-barrier.c",
    "test/test-condvar.c",
    "test/test-timer-again.c",
    "test/test-timer-from-check.c",
    "test/test-timer.c",
    "test/test-tty.c",
    "test/test-udp-bind.c",
    "test/test-udp-create-socket-early.c",
    "test/test-udp-dgram-too-big.c",
    "test/test-udp-ipv6.c",
    "test/test-udp-open.c",
    "test/test-udp-options.c",
    "test/test-udp-send-and-recv.c",
    "test/test-udp-send-immediate.c",
    "test/test-udp-send-unreachable.c",
    "test/test-udp-multicast-join.c",
    "test/test-udp-multicast-join6.c",
    "test/test-dlerror.c",
    "test/test-udp-multicast-ttl.c",
    "test/test-ip4-addr.c",
    "test/test-ip6-addr.c",
    "test/test-udp-multicast-interface.c",
    "test/test-udp-multicast-interface6.c",
    "test/test-udp-try-send.c",
  ]
  
  if (is_win) {
    sources += [
      "test/runner-win.c",
      "test/runner-win.h",
    ]
  } else {
    sources += [
      "test/runner-unix.c",
      "test/runner-unix.h",
    ]
  }
  
  if (is_win) {
    libs = [ "ws2_32.lib" ]
  } else {
    defines = [ "_GNU_SOURCE" ]
  }
  
  configs += [ ":default_config" ]

  deps = [
    ":libuv"
  ]
}

executable("libuv-run-benchmarks") {
  sources = [
    "test/benchmark-async.c",
    "test/benchmark-async-pummel.c",
    "test/benchmark-fs-stat.c",
    "test/benchmark-getaddrinfo.c",
    "test/benchmark-list.h",
    "test/benchmark-loop-count.c",
    "test/benchmark-million-async.c",
    "test/benchmark-million-timers.c",
    "test/benchmark-multi-accept.c",
    "test/benchmark-ping-pongs.c",
    "test/benchmark-pound.c",
    "test/benchmark-pump.c",
    "test/benchmark-sizes.c",
    "test/benchmark-spawn.c",
    "test/benchmark-thread.c",
    "test/benchmark-tcp-write-batch.c",
    "test/benchmark-udp-pummel.c",
    "test/dns-server.c",
    "test/echo-server.c",
    "test/blackhole-server.c",
    "test/run-benchmarks.c",
    "test/runner.c",
    "test/runner.h",
    "test/task.h",
  ]
  
  if (is_win) {
    sources += [
      "test/runner-win.c",
      "test/runner-win.h",
    ]
  } else {
    sources += [
      "test/runner-unix.c",
      "test/runner-unix.h",
    ]
  }
  
  if (is_win) {
    libs = [ "ws2_32.lib" ]
  } else {
    defines = [ "_GNU_SOURCE" ]
  }
  
  configs += [ ":default_config" ]

  deps = [
    ":libuv"
  ]
}

